From e44fd02ce824c19e27eeea83828c82849b644254 Mon Sep 17 00:00:00 2001
From: Doug Fish <drfish@us.ibm.com>
Date: Wed, 25 Feb 2015 18:01:59 -0600
Subject: [PATCH] WIP K2K federation

Current code iterates through the catalog and gets an unscoped
token from all of the remote keystones and gets the projects
from remote keystones.  It gets a scoped token for each sp
keystone and stores the tokens in the session. Regions are listed
across all keystones. Switch regions also updates to the relevant
keystone url and project from the correct region.

Current issues:
- Still need to handle logout token cleanup
- Still need to properly handle duplicate region names in different
cloud instances (current version just concatenates the sp id using a
separator)

Co-Authored-By: Paulo Ewerton <pauloewerton@lsd.ufcg.edu.br>

Implements: blueprint k2k-federation
Change-Id: I7febc50b745ecaffeb36d39f5b10b1ef33774f8e
---
 openstack_auth/backend.py | 73 +++++++++++++++++++++++++++++++++++++++++------
 openstack_auth/user.py    | 33 ++++++++++++++-------
 openstack_auth/utils.py   | 28 ++++++++++++++++++
 openstack_auth/views.py   | 16 +++++++++++
 4 files changed, 131 insertions(+), 19 deletions(-)

diff --git a/openstack_auth/backend.py b/openstack_auth/backend.py
index e2d83c0..eb8d3c0 100644
--- a/openstack_auth/backend.py
+++ b/openstack_auth/backend.py
@@ -20,6 +20,7 @@ import pytz
 from django.conf import settings
 from django.utils.module_loading import import_string  # noqa
 from django.utils.translation import ugettext_lazy as _
+from keystoneauth1.identity import v3 as v3_auth
 from keystoneclient import exceptions as keystone_exceptions
 
 from openstack_auth import exceptions
@@ -86,6 +87,8 @@ class KeystoneBackend(object):
     def authenticate(self, auth_url=None, **kwargs):
         """Authenticates a user via the Keystone Identity API."""
         LOG.debug('Beginning user authentication')
+        keystone_client_class = utils.get_keystone_client().Client
+        request = kwargs.get('request')
 
         if not auth_url:
             auth_url = settings.OPENSTACK_KEYSTONE_URL
@@ -106,7 +109,6 @@ class KeystoneBackend(object):
             raise exceptions.KeystoneAuthException(msg)
 
         session = utils.get_session()
-        keystone_client_class = utils.get_keystone_client().Client
 
         try:
             unscoped_auth_ref = unscoped_auth.get_access(session)
@@ -148,6 +150,64 @@ class KeystoneBackend(object):
         projects = plugin.list_projects(session,
                                         unscoped_auth,
                                         unscoped_auth_ref)
+
+        scoped_auth, scoped_auth_ref = self._authenticate_unscoped(
+            request, session, auth_url, unscoped_auth_ref, projects,
+            domain_auth_ref=domain_auth_ref, domain_auth=domain_auth)
+
+        scoped_client = keystone_client_class(session=session,
+                                              auth=scoped_auth)
+
+        # Check service catalog for remote keystone instances
+        service_providers = scoped_auth_ref.service_providers
+        if service_providers:
+            # TODO(pauloewerton): use more appropriate id for idp maybe?
+            utils.set_k2k_data(request, auth_url, 'keystone.idp',
+                               scoped_auth_ref, unscoped_auth_ref.auth_token)
+
+            for provider in service_providers._service_providers:
+                try:
+                    self._remote_login(request, scoped_auth, provider.id)
+                except Exception as exc:
+                    LOG.warning(_('Could not remote login to service '
+                                  'provider. %s') % str(exc))
+
+        # Support client caching to save on auth calls.
+        setattr(request, KEYSTONE_CLIENT_ATTR, scoped_client)
+
+        return self._create_user(request, scoped_auth_ref, unscoped_auth_ref,
+                                 domain_auth_ref=domain_auth_ref)
+
+    def _remote_login(self, request, idp_scoped_auth, provider_id):
+        if not request:
+            return
+
+        keystone_client_class = utils.get_keystone_client().Client
+        session = utils.get_session()
+        unscoped_auth = v3_auth.Keystone2Keystone(idp_scoped_auth,
+                                                  provider_id)
+        unscoped_auth_ref = unscoped_auth.get_access(session)
+        unscoped_client = keystone_client_class(session=session,
+                                                auth=unscoped_auth)
+        try:
+            projects = unscoped_client.federation.projects.list()
+        except (keystone_exceptions.ClientException,
+                keystone_exceptions.AuthorizationFailure):
+            msg = _('Unable to remote retrieve authorized projects.')
+            raise exceptions.KeystoneAuthException(msg)
+
+        auth_url = unscoped_auth.auth_url
+
+        scoped_auth, scoped_auth_ref = self._authenticate_unscoped(
+            request, session, auth_url,
+            unscoped_auth_ref, projects)
+
+        utils.set_k2k_data(request, auth_url, provider_id, scoped_auth_ref,
+                           unscoped_auth_ref.auth_token)
+
+    def _authenticate_unscoped(self, request, session, auth_url,
+                               unscoped_auth_ref, projects,
+                               domain_auth_ref=None, domain_auth=None):
         # Attempt to scope only to enabled projects
         projects = [project for project in projects if project.enabled]
 
@@ -174,7 +234,6 @@ class KeystoneBackend(object):
 
         # the recent project id a user might have set in a cookie
         recent_project = None
-        request = kwargs.get('request')
 
         if request:
             # Grab recent_project found in the cookie, try to scope
@@ -217,6 +276,10 @@ class KeystoneBackend(object):
         # Check expiry for our new scoped token.
         self.check_auth_expiry(scoped_auth_ref)
 
+        return scoped_auth, scoped_auth_ref
+
+    def _create_user(self, request, scoped_auth_ref, unscoped_auth_ref,
+                     domain_auth_ref=None):
         interface = getattr(settings, 'OPENSTACK_ENDPOINT_TYPE', 'public')
 
         # If we made it here we succeeded. Create our User!
@@ -248,12 +311,6 @@ class KeystoneBackend(object):
             session_time = min(timeout, token_life.seconds)
             request.session.set_expiry(session_time)
 
-            scoped_client = keystone_client_class(session=session,
-                                                  auth=scoped_auth)
-
-            # Support client caching to save on auth calls.
-            setattr(request, KEYSTONE_CLIENT_ATTR, scoped_client)
-
         LOG.debug('Authentication completed.')
         return user
 
diff --git a/openstack_auth/user.py b/openstack_auth/user.py
index 9dee0f5..038c6ce 100644
--- a/openstack_auth/user.py
+++ b/openstack_auth/user.py
@@ -33,6 +33,7 @@ def set_session_from_user(request, user):
     request.session['user_id'] = user.id
     request.session['region_endpoint'] = user.endpoint
     request.session['services_region'] = user.services_region
+    request.session['k2k_data'] = user.k2k_data
     # Update the user object cached in the request
     request._cached_user = user
     request.user = user
@@ -60,7 +61,8 @@ def create_user_from_token(request, token, endpoint, services_region=None):
                 services_region=svc_region,
                 is_federated=getattr(token, 'is_federated', False),
                 unscoped_token=getattr(token, 'unscoped_token',
-                                       request.session.get('unscoped_token')))
+                                       request.session.get('unscoped_token')),
+                k2k_data=request.session.get('k2k_data', {}))
 
 
 class Token(object):
@@ -195,7 +197,8 @@ class User(models.AbstractBaseUser, models.AnonymousUser):
                  services_region=None, user_domain_id=None,
                  user_domain_name=None, domain_id=None, domain_name=None,
                  project_id=None, project_name=None,
-                 is_federated=False, unscoped_token=None, password=None):
+                 is_federated=False, unscoped_token=None, password=None,
+                 k2k_data={}):
         self.id = id
         self.pk = id
         self.token = token
@@ -221,6 +224,7 @@ class User(models.AbstractBaseUser, models.AnonymousUser):
         # Unscoped token is used for listing user's project that works
         # for both federated and keystone user.
         self.unscoped_token = unscoped_token
+        self.k2k_data = k2k_data
 
         # List of variables to be deprecated.
         self.tenant_id = self.project_id
@@ -332,15 +336,22 @@ class User(models.AbstractBaseUser, models.AnonymousUser):
     def available_services_regions(self):
         """Returns list of unique region name values in service catalog."""
         regions = []
-        if self.service_catalog:
-            for service in self.service_catalog:
-                service_type = service.get('type')
-                if service_type is None or service_type == 'identity':
-                    continue
-                for endpoint in service.get('endpoints', []):
-                    region = utils.get_endpoint_region(endpoint)
-                    if region not in regions:
-                        regions.append(region)
+        remote_regions = []
+
+        if self.k2k_data:
+            for url in self.k2k_data:
+                provider_id = self.k2k_data[url].get('provider_id')
+                auth_ref = self.k2k_data[url].get('scoped_auth')
+                service_catalog = auth_ref.service_catalog.catalog
+                remote_regions = utils.get_regions_from_catalog(
+                    service_catalog)
+                remote_regions = [(region + ':' + provider_id)
+                                  for region in remote_regions]
+                regions.extend(remote_regions)
+        else:
+            if self.service_catalog:
+                regions = utils.get_regions_from_catalog(self.service_catalog)
+
         return regions
 
     def save(*args, **kwargs):
diff --git a/openstack_auth/utils.py b/openstack_auth/utils.py
index 16f4adf..2d6bf6c 100644
--- a/openstack_auth/utils.py
+++ b/openstack_auth/utils.py
@@ -177,6 +177,34 @@ def is_websso_enabled():
     return websso_enabled and keystonev3_plus
 
 
+def set_k2k_data(request, auth_url, provider_id, scoped_auth, unscoped_token):
+    if not request:
+        return
+
+    k2k_data = {
+        'provider_id': provider_id,
+        'scoped_auth': scoped_auth,
+        'unscoped_token': unscoped_token
+    }
+
+    current_data = request.session.get('k2k_data', {})
+    current_data[auth_url] = k2k_data
+    request.session['k2k_data'] = current_data
+
+
+def get_regions_from_catalog(service_catalog):
+    regions = []
+    for service in service_catalog:
+        service_type = service.get('type')
+        if service_type is None or service_type == 'identity':
+            continue
+        for endpoint in service.get('endpoints', []):
+            region = get_endpoint_region(endpoint)
+            if region not in regions:
+                regions.append(region)
+    return regions
+
+
 def build_absolute_uri(request, relative_url):
     """Ensure absolute_uri are relative to WEBROOT."""
     webroot = getattr(settings, 'WEBROOT', '')
diff --git a/openstack_auth/views.py b/openstack_auth/views.py
index 95472cb..e9d4970 100644
--- a/openstack_auth/views.py
+++ b/openstack_auth/views.py
@@ -266,7 +266,23 @@ def switch_region(request, region_name,
     The region will be switched if the given region is one of the regions
     available for the scoped project. Otherwise the region is not switched.
     """
+    k2k_data = request.session.get('k2k_data')
+
     if region_name in request.user.available_services_regions:
+        if k2k_data:
+            federated_region = region_name.split(':')
+            for url in k2k_data:
+                if k2k_data[url].get('provider_id') == federated_region[1]:
+                    region_name = federated_region[0]
+                    auth_ref = k2k_data[url].get('scoped_auth')
+                    unscoped_token = k2k_data[url].get('unscoped_token')
+
+                    request.session['region_endpoint'] = url
+                    request.session['token'] = auth_user.Token(
+                        auth_ref=auth_ref,
+                        unscoped_token=unscoped_token)
+                    request.session['unscoped_token'] = unscoped_token
+
         request.session['services_region'] = region_name
         LOG.debug('Switching services region to %s for user "%s".'
                   % (region_name, request.user.username))
-- 
1.9.1

