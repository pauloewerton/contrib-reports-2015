From 3f681e30125d1ea89889958f67d1a3a4bc581ea5 Mon Sep 17 00:00:00 2001
From: Paulo Ewerton <pauloewerton@lsd.ufcg.edu.br>
Date: Thu, 12 Nov 2015 20:33:16 +0000
Subject: [PATCH] Adding NGProjects Create Action - Quota

This patch adds the members step to the create action
workflow.

To test, go to url /identity/ngprojects.

Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br>

Change-Id: I3a9712ad35d0e60896e01fc59105aa092e6616fb
Partially-Implements: blueprint angularize-identity-projects
---
 .../actions/projects-create.action.service.js      | 57 ++++++++++++-
 .../actions/projects-create.action.service.spec.js | 38 ++++++++-
 .../actions/projects-create.workflow.service.js    |  6 ++
 .../dashboard/identity/projects/projects.module.js |  3 +-
 .../steps/quota/project-quota.controller.js        | 88 +++++++++++++++++++
 .../steps/quota/project-quota.controller.spec.js   | 99 ++++++++++++++++++++++
 .../projects/steps/quota/project-quota.html        | 93 ++++++++++++++++++++
 7 files changed, 378 insertions(+), 6 deletions(-)
 create mode 100644 openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.controller.js
 create mode 100644 openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.controller.spec.js
 create mode 100644 openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.html

diff --git a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.action.service.js b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.action.service.js
index 2b23b02..e039dde 100644
--- a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.action.service.js
+++ b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.action.service.js
@@ -25,6 +25,11 @@
     'horizon.framework.util.i18n.gettext',
     'horizon.framework.widgets.toast.service',
     'horizon.app.core.openstack-service-api.keystone',
+    'horizon.app.core.openstack-service-api.cinder',
+    'horizon.app.core.openstack-service-api.neutron',
+    'horizon.app.core.openstack-service-api.neutronExtensions',
+    'horizon.app.core.openstack-service-api.nova',
+    'horizon.app.core.openstack-service-api.serviceCatalog',
     'horizon.dashboard.identity.projects.events',
     'IdentityProjectsCreateWorkflow'
   ];
@@ -40,6 +45,11 @@
     gettext,
     toast,
     keystone,
+    cinder,
+    neutron,
+    neutronExtensions,
+    nova,
+    catalog,
     events,
     workflow
   ) {
@@ -49,12 +59,14 @@
     var messages = {
       projectSuccess: gettext('Project %s was successfully created.'),
       nameUsed: gettext('Project name %s is already used.'),
-      userSuccess: gettext('User %s was successfully assigned to project %s as %s.')
+      userSuccess: gettext('User %s was successfully assigned to project %s as %s.'),
+      quotaSuccess: gettext('%s quotas updated successfully.')
     };
 
     var model = {
       project: {},
-      users: []
+      users: [],
+      quota: {}
     };
 
     var service = {
@@ -73,6 +85,7 @@
     function initScope($scope) {
       var createWatch = $scope.$on(events.projectChanged, onProjectChange);
       var membersWatch = $scope.$on(events.usersChanged, onUsersChange);
+      var quotaWatch = $scope.$on(events.quotaChanged, onQuotaChange);
 
       $scope.$on('$destroy', destroy);
       scope = $scope;
@@ -80,6 +93,7 @@
       function destroy() {
         createWatch();
         membersWatch();
+        quotaWatch();
       }
     }
 
@@ -93,6 +107,11 @@
       evt.stopPropagation();
     }
 
+    function onQuotaChange(evt, quota) {
+      model.quota = quota;
+      evt.stopPropagation();
+    }
+
     ////////////////////
 
     function open(projects) {
@@ -142,6 +161,7 @@
 
     function subflows() {
       membersSubflow();
+      quotaSubflow();
 
       return $q.when();
     }
@@ -164,6 +184,39 @@
         }
       });
     }
+
+    function quotaSubflow() {
+      checkServiceEnabled(nova, 'Compute');
+      checkServiceEnabled(cinder, 'Volume');
+      checkServiceEnabled(neutron, 'Network');
+    }
+
+    function checkServiceEnabled(service, serviceName) {
+      catalog.ifTypeEnabled(serviceName.toLowerCase()).then(onServiceEnabled);
+
+      function onServiceEnabled() {
+        if (service !== neutron) {
+          updateProjectQuota();
+        } else {
+          neutronExtensions.ifNameEnabled('Quota management support').then(
+            function updateNeutronQuota() {
+              updateProjectQuota();
+            },
+            function disabled(response) {
+              toast.add('info', interpolate('Neutron %s', [response]));
+            }
+          );
+        }
+      }
+
+      function updateProjectQuota() {
+        service.updateProjectQuota(model.quota, model.project.id).then(
+          function onQuotaSuccess() {
+            toast.add('success', interpolate(messages.quotaSuccess, [serviceName]));
+          }
+        );
+      }
+    }
   }
 
 })();
diff --git a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.action.service.spec.js b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.action.service.spec.js
index 6e24959..a076a53 100644
--- a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.action.service.spec.js
+++ b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.action.service.spec.js
@@ -16,9 +16,10 @@
   'use strict';
 
   describe('Identity Projects create action service', function() {
-    var $q, $scope, service, events;
+    var $q, $scope, catalog, service, events;
 
     var project = {id: '123', name: 'project3'};
+    var quota = {name: 'quota', limit: 10};
     var response = {data: project};
     var promise = {
       defer: angular.noop,
@@ -39,12 +40,27 @@
     keystone.createProject.and.returnValue(promise);
     keystone.grantRole.and.returnValue(promise);
 
+    var cinder = jasmine.createSpyObj('cinder', ['updateProjectQuota']);
+    cinder.updateProjectQuota.and.returnValue(promise);
+    var nova = jasmine.createSpyObj('nova', ['updateProjectQuota']);
+    nova.updateProjectQuota.and.returnValue(promise);
+    var neutron = jasmine.createSpyObj('neutron', ['updateProjectQuota']);
+    neutron.updateProjectQuota.and.returnValue(promise);
+    var neutronExtensions = jasmine.createSpyObj('neutronExtensions', ['ifNameEnabled']);
+    neutronExtensions.ifNameEnabled.and.returnValue(promise);
+
     beforeEach(module('horizon.dashboard.identity.projects'));
+    beforeEach(module('horizon.app.core.openstack-service-api'));
 
     beforeEach(module(function($provide) {
       spyOn(window, 'interpolate').and.callFake(function() { return ''; });
       $provide.value('$modal', $modal);
       $provide.value('horizon.app.core.openstack-service-api.keystone', keystone);
+      $provide.value('horizon.app.core.openstack-service-api.cinder', cinder);
+      $provide.value('horizon.app.core.openstack-service-api.nova', nova);
+      $provide.value('horizon.app.core.openstack-service-api.neutron', neutron);
+      $provide.value('horizon.app.core.openstack-service-api.neutronExtensions',
+                     neutronExtensions);
       $provide.value('horizon.framework.util.i18n.gettext', angular.noop);
       $provide.value('horizon.framework.widgets.toast.service', toast);
       $provide.value('IdentityProjectsCreateWorkflow', {});
@@ -58,6 +74,9 @@
       $scope = $injector.get('$rootScope').$new();
       spyOn($scope, '$emit').and.callThrough();
 
+      catalog = $injector.get('horizon.app.core.openstack-service-api.serviceCatalog');
+      spyOn(catalog, 'ifTypeEnabled').and.returnValue(promise);
+
       events = $injector.get('horizon.dashboard.identity.projects.events');
       service = $injector.get('IdentityProjectsCreateAction');
       service.initScope($scope);
@@ -85,8 +104,21 @@
       for (var i = 0; i < users.length; i++) {
         rolesCount += users[i].roles.length;
       }
-      // +1 accounting for the toast called for creating project
-      expect(toast.add.calls.count()).toBe(rolesCount + 1);
+      // +4 accounting for the toast called for creating project and updating quotas
+      expect(toast.add.calls.count()).toBe(rolesCount + 4);
+    });
+
+    it('should update project quotas on submit if services are enabled', function() {
+      toast.add.calls.reset();
+      $scope.$emit(events.quotaChanged, quota);
+      service.submit();
+      expect($scope.$emit).toHaveBeenCalled();
+      expect(cinder.updateProjectQuota).toHaveBeenCalledWith(quota, project.id);
+      expect(neutron.updateProjectQuota).toHaveBeenCalledWith(quota, project.id);
+      expect(nova.updateProjectQuota).toHaveBeenCalledWith(quota, project.id);
+      expect(toast.add).toHaveBeenCalledWith('success', jasmine.any(String));
+      // At least three quota success toasts +1 create project
+      expect(toast.add.calls.count()).toBeGreaterThan(3);
     });
 
     it('should have a handler for the projectChanged event', function() {
diff --git a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.workflow.service.js b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.workflow.service.js
index 53a7104..89040be 100644
--- a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.workflow.service.js
+++ b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/actions/projects-create.workflow.service.js
@@ -48,6 +48,12 @@
           templateUrl: path + 'members/project-members.html',
           helpUrl: path + 'members/project-members-help.html',
           formName: 'identityProjectsMembersForm'
+        },
+        {
+          title: gettext('Quota'),
+          templateUrl: path + 'quota/project-quota.html',
+          helpUrl: path + 'quota/project-quota-help.html',
+          formName: 'identityProjectsQuotaForm'
         }
       ]
     });
diff --git a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/projects.module.js b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/projects.module.js
index eb0e74c..2ce0ec7 100644
--- a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/projects.module.js
+++ b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/projects.module.js
@@ -37,7 +37,8 @@
     var events = {
       projectChanged: 'horizon.dashboard.identity.projects.events.PROJECT_CHANGED',
       createSuccess: 'horizon.dashboard.identity.projects.events.CREATE_SUCCESS',
-      usersChanged: 'horizon.dashboard.identity.projects.events.USERS_CHANGED'
+      usersChanged: 'horizon.dashboard.identity.projects.events.USERS_CHANGED',
+      quotaChanged: 'horizon.dashboard.identity.projects.events.QUOTA_CHANGED'
     };
 
     $provide.constant('horizon.dashboard.identity.projects.basePath', path);
diff --git a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.controller.js b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.controller.js
new file mode 100644
index 0000000..9d19c29
--- /dev/null
+++ b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.controller.js
@@ -0,0 +1,88 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+(function() {
+  'use strict';
+
+  angular
+    .module('horizon.dashboard.identity.projects')
+    .controller('IdentityProjectsQuotaController', IdentityProjectsQuotaController);
+
+  IdentityProjectsQuotaController.$inject = [
+    '$q',
+    '$scope',
+    'horizon.dashboard.identity.projects.events',
+    'horizon.app.core.openstack-service-api.cinder',
+    'horizon.app.core.openstack-service-api.neutron',
+    'horizon.app.core.openstack-service-api.nova'
+  ];
+
+  /**
+    * @ngdoc controller
+    * @name IdentityProjectsQuotaController
+    * @description
+    * This controller is used for the project quota sets workflow step.
+   */
+  function IdentityProjectsQuotaController($q, $scope, events, cinder, neutron, nova) {
+    var ctrl = this;
+
+    ctrl.quota = {};
+    ctrl.editableQuotas = {};
+    ctrl.cinderDefaultQuotas = {};
+    ctrl.neutronDefaultQuotas = {};
+    ctrl.novaDefaultQuotas = {};
+
+    init();
+
+    /////////////////////////
+
+    function init() {
+      var calls = {
+        editable: nova.getEditableQuotas(),
+        cinder: cinder.getDefaultQuotaSets(),
+        neutron: neutron.getDefaultQuotaSets(),
+        nova: nova.getDefaultQuotaSets()
+      };
+
+      $q.all(calls).then(getDefaultQuotasSuccess);
+      $scope.$watchCollection(watchQuotaCollection, handleQuotaChange);
+    }
+
+    function watchQuotaCollection() {
+      return ctrl.quota;
+    }
+
+    function handleQuotaChange(newValue, oldValue) {
+      if (newValue !== oldValue) {
+        $scope.$emit(events.quotaChanged, newValue);
+      }
+    }
+
+    function getDefaultQuotasSuccess(response) {
+      ctrl.editableQuotas = response.editable.data.items;
+      ctrl.cinderDefaultQuotas = response.cinder.data.items;
+      ctrl.neutronDefaultQuotas = response.neutron.data.items;
+      ctrl.novaDefaultQuotas = response.nova.data.items;
+
+      var defaultQuotas = ctrl.novaDefaultQuotas
+        .concat(ctrl.cinderDefaultQuotas)
+        .concat(ctrl.neutronDefaultQuotas);
+
+      angular.forEach(defaultQuotas, function forEach(quota) {
+        ctrl.quota[quota.name] = quota.limit;
+      });
+    }
+  }
+
+})();
diff --git a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.controller.spec.js b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.controller.spec.js
new file mode 100644
index 0000000..4586b91
--- /dev/null
+++ b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.controller.spec.js
@@ -0,0 +1,99 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+(function() {
+  'use strict';
+
+  describe('Identity Projects quota controller', function() {
+    var $scope, ctrl;
+
+    var fakeQuotas = {
+      data: {
+        items: [
+          { name: 'cores', limit: 10 },
+          { name: 'volumes', limit: 10 },
+          { name: 'fixed_ips', limit: 10 }
+        ]
+      }
+    };
+
+    var fakeData = {
+      editable: fakeQuotas,
+      cinder: fakeQuotas,
+      neutron: fakeQuotas,
+      nova: fakeQuotas
+    };
+
+    var fakeQ = {
+      defer: angular.noop,
+      all: function() {
+        return {
+          then: function(successFn) {
+            successFn(fakeData);
+          }
+        };
+      }
+    };
+
+    var fakeService = {
+      getDefaultQuotaSets: angular.noop,
+      getEditableQuotas: angular.noop
+    };
+
+    beforeEach(module('horizon.dashboard.identity.projects'));
+    beforeEach(module(function($provide) {
+      $provide.value('horizon.app.core.openstack-service-api.cinder', fakeService);
+      $provide.value('horizon.app.core.openstack-service-api.nova', fakeService);
+      $provide.value('horizon.app.core.openstack-service-api.neutron', fakeService);
+    }));
+
+    beforeEach(inject(function($controller, $rootScope) {
+      $scope = $rootScope.$new();
+
+      ctrl = $controller('IdentityProjectsQuotaController', {
+        $q: fakeQ,
+        $scope: $scope,
+        cinder: fakeService,
+        nova: fakeService,
+        neutron: fakeService,
+        events: {}
+      });
+    }));
+
+    it('should instanciante editable/services quotas on load', function() {
+      expect(ctrl.editableQuotas).toBe(fakeQuotas.data.items);
+      expect(ctrl.cinderDefaultQuotas).toBe(fakeQuotas.data.items);
+      expect(ctrl.neutronDefaultQuotas).toBe(fakeQuotas.data.items);
+      expect(ctrl.novaDefaultQuotas).toBe(fakeQuotas.data.items);
+    });
+
+    it('should instantiate new quota object on load', function() {
+      var quota = {};
+      angular.forEach(fakeQuotas.data.items, function(q) {
+        quota[q.name] = q.limit;
+      });
+      expect(ctrl.quota).toEqual(quota);
+    });
+
+    it('should broadcast event when quota changes', function() {
+      spyOn($scope, '$emit');
+      $scope.$apply();
+
+      ctrl.quota = {name: 'quota', limit: 5};
+      $scope.$apply();
+      expect($scope.$emit).toHaveBeenCalled();
+    });
+  });
+
+})();
diff --git a/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.html b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.html
new file mode 100644
index 0000000..b6ef2fe
--- /dev/null
+++ b/openstack_dashboard/dashboards/identity/static/dashboard/identity/projects/steps/quota/project-quota.html
@@ -0,0 +1,93 @@
+<div ng-controller="IdentityProjectsQuotaController as quotaCtrl">
+
+  <h1 translate>Set Quotas</h1>
+
+  <div class="content">
+    <div class="subtitle">
+      <translate>Set resource limits for this project.</translate>
+    </div>
+
+    <div class="row">
+
+      <div class="col-xs-6 col-sm-4 compute-source clearfix" ng-if-services="'compute'">
+        <h2 class="section-title" translate>Compute (Nova)</h2>
+
+        <div ng-repeat="quota in quotaCtrl.novaDefaultQuotas">
+          <div ng-class="{'has-error': identityProjectsQuotaForm[quota.name].$invalid &&
+                                       identityProjectsQuotaForm[quota.name].$dirty}"
+               ng-if="quotaCtrl.editableQuotas.indexOf(quota.name) !== -1"
+               class="form-group">
+            <div class="form-field required">
+
+              <label class="control-label" for="{$ ::quota.name $}">
+                {$ ::quota.display_name $}
+              </label>
+
+              <input type="number"
+                     id="{$ ::quota.name $}"
+                     name="{$ ::quota.name $}"
+                     class="form-control input-sm"
+                     min="-1"
+                     required
+                     ng-model="quotaCtrl.quota[quota.name]">
+            </div> <!-- form-field -->
+          </div> <!-- form-group -->
+        </div> <!-- ng-repeat -->
+      </div> <!-- col compute -->
+
+
+      <div class="col-xs-6 col-sm-4 volumes-source clearfix" ng-if-services="'volume'">
+        <h2 class="section-title" translate>Block Storage (Cinder)</h2>
+
+        <div ng-repeat="quota in quotaCtrl.cinderDefaultQuotas">
+          <div ng-class="{'has-error': identityProjectsQuotaForm[quota.name].$invalid &&
+                                       identityProjectsQuotaForm[quota.name].$dirty}"
+               ng-if="quotaCtrl.editableQuotas.indexOf(quota.name) !== -1"
+               class="form-group">
+            <div class="form-field required">
+
+              <label class="control-label" for="{$ ::quota.name $}">
+                {$ ::quota.display_name $}
+              </label>
+
+              <input type="number"
+                     id="{$ ::quota.name $}"
+                     name="{$ ::quota.name $}"
+                     class="form-control input-sm"
+                     min="-1"
+                     required
+                     ng-model="quotaCtrl.quota[quota.name]">
+            </div> <!-- form-field -->
+          </div> <!-- form-group -->
+        </div> <!-- ng-repeat -->
+      </div> <!-- col volume -->
+
+      <div class="col-xs-6 col-sm-4 network-source clearfix" ng-if-services="'network'">
+        <h2 class="section-title" translate>Network (Neutron)</h2>
+
+        <div ng-repeat="quota in quotaCtrl.neutronDefaultQuotas">
+          <div ng-class="{'has-error': identityProjectsQuotaForm[quota.name].$invalid &&
+                                       identityProjectsQuotaForm[quota.name].$dirty}"
+               ng-if="quotaCtrl.editableQuotas.indexOf(quota.name) !== -1"
+               class="form-group">
+            <div class="form-field required">
+
+              <label class="control-label" for="{$ ::quota.name $}">
+                {$ ::quota.display_name $}
+              </label>
+
+              <input type="number"
+                     id="{$ ::quota.name $}"
+                     name="{$ ::quota.name $}"
+                     class="form-control input-sm"
+                     min="-1"
+                     required
+                     ng-model="quotaCtrl.quota[quota.name]">
+            </div> <!-- form-field -->
+          </div> <!-- form-group -->
+        </div> <!-- ng-repeat -->
+      </div> <!-- col network -->
+
+    </div> <!-- row -->
+  </div><!-- content -->
+</div><!-- ng-controller -->
-- 
1.9.1

