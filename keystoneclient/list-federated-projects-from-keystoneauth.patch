From 4842b187b6ab3d5904bf5153bb77ece645f48421 Mon Sep 17 00:00:00 2001
From: Doug Fish <drfish@us.ibm.com>
Date: Tue, 16 Jun 2015 21:12:08 +0000
Subject: [PATCH] List federated projects from keystoneauth

Handle the EmptyCatalog exception raised from the
keystoneauth1.access.service_catalog.url_for
function in the unscoped token case.

Also make sure AUTH_INTERFACE is passed in from
keystoneauth1.plugin not keystoneclient.auth.base
so that it passes the check at
keystoneauth1.identity.base.get_endpoint. This
particular change covers the non-federated
project listings also.

Co-Authored-By: Paulo Ewerton Gomes Fragoso <pauloewerton@lsd.ufcg.edu.br>

Closes-Bug: #1471943
Change-Id: Ia2d38fb612f54472a7ccca17b4da2590ed0c4f32
---
 keystoneclient/auth/identity/base.py               |  3 +-
 keystoneclient/base.py                             |  4 +-
 keystoneclient/httpclient.py                       |  3 +-
 keystoneclient/tests/unit/auth/test_access.py      |  2 +-
 .../tests/unit/auth/test_identity_common.py        |  5 ++-
 keystoneclient/tests/unit/v3/test_federation.py    | 48 ++++++++++++++++++----
 keystoneclient/v2_0/tenants.py                     |  4 +-
 keystoneclient/v2_0/tokens.py                      |  4 +-
 keystoneclient/v3/auth.py                          |  6 +--
 keystoneclient/v3/contrib/federation/base.py       |  7 ++--
 keystoneclient/v3/contrib/oauth1/access_tokens.py  |  4 +-
 keystoneclient/v3/contrib/oauth1/request_tokens.py |  4 +-
 12 files changed, 63 insertions(+), 31 deletions(-)

diff --git a/keystoneclient/auth/identity/base.py b/keystoneclient/auth/identity/base.py
index 57e1723..17bd3ee 100644
--- a/keystoneclient/auth/identity/base.py
+++ b/keystoneclient/auth/identity/base.py
@@ -17,6 +17,7 @@ import warnings
 from oslo_config import cfg
 import six
 
+from keystoneauth1 import plugin
 from keystoneclient import _discover
 from keystoneclient.auth import base
 from keystoneclient import exceptions
@@ -297,7 +298,7 @@ class BaseIdentityPlugin(base.BaseAuthPlugin):
         # are asking for the auth endpoint it means that there is no catalog to
         # query however we still need to support asking for a specific version
         # of the auth_url for generic plugins.
-        if interface is base.AUTH_INTERFACE:
+        if interface is plugin.AUTH_INTERFACE:
             url = self.auth_url
             service_type = service_type or 'identity'
 
diff --git a/keystoneclient/base.py b/keystoneclient/base.py
index f19ed84..cd7f121 100644
--- a/keystoneclient/base.py
+++ b/keystoneclient/base.py
@@ -28,7 +28,7 @@ from oslo_utils import strutils
 import six
 from six.moves import urllib
 
-from keystoneclient import auth
+from keystoneauth1 import plugin
 from keystoneclient import exceptions
 from keystoneclient.i18n import _
 
@@ -391,7 +391,7 @@ class CrudManager(Manager):
                 return self._list(
                     url_query,
                     self.collection_key,
-                    endpoint_filter={'interface': auth.AUTH_INTERFACE})
+                    endpoint_filter={'interface': plugin.AUTH_INTERFACE})
             else:
                 raise
 
diff --git a/keystoneclient/httpclient.py b/keystoneclient/httpclient.py
index c663535..4966e6f 100644
--- a/keystoneclient/httpclient.py
+++ b/keystoneclient/httpclient.py
@@ -54,6 +54,7 @@ if not hasattr(urlparse, 'parse_qsl'):
     urlparse.parse_qsl = cgi.parse_qsl
 
 
+from keystoneauth1 import plugin
 from keystoneclient import _discover
 from keystoneclient import access
 from keystoneclient import adapter
@@ -388,7 +389,7 @@ class HTTPClient(baseclient.Client, base.BaseAuthPlugin):
             return self.auth_token_from_user
 
     def get_endpoint(self, session, interface=None, **kwargs):
-        if interface == 'public' or interface is base.AUTH_INTERFACE:
+        if interface == 'public' or interface is plugin.AUTH_INTERFACE:
             return self.auth_url
         else:
             return self.management_url
diff --git a/keystoneclient/tests/unit/auth/test_access.py b/keystoneclient/tests/unit/auth/test_access.py
index 405fb8b..7c5981c 100644
--- a/keystoneclient/tests/unit/auth/test_access.py
+++ b/keystoneclient/tests/unit/auth/test_access.py
@@ -12,8 +12,8 @@
 
 import uuid
 
+from keystoneauth1 import plugin as auth
 from keystoneclient import access
-from keystoneclient import auth
 from keystoneclient.auth.identity import access as access_plugin
 from keystoneclient import fixture
 from keystoneclient import session
diff --git a/keystoneclient/tests/unit/auth/test_identity_common.py b/keystoneclient/tests/unit/auth/test_identity_common.py
index d565254..32b0331 100644
--- a/keystoneclient/tests/unit/auth/test_identity_common.py
+++ b/keystoneclient/tests/unit/auth/test_identity_common.py
@@ -18,6 +18,7 @@ import mock
 from oslo_utils import timeutils
 import six
 
+from keystoneauth1 import plugin
 from keystoneclient import access
 from keystoneclient.auth import base
 from keystoneclient.auth import identity
@@ -188,7 +189,7 @@ class CommonIdentityTests(object):
         s = session.Session(auth=a)
 
         auth_url = s.get_endpoint(service_type='compute',
-                                  interface=base.AUTH_INTERFACE)
+                                  interface=plugin.AUTH_INTERFACE)
 
         self.assertEqual(self.TEST_URL, auth_url)
 
@@ -395,7 +396,7 @@ class CatalogHackTests(utils.TestCase):
 
         sess = session.Session(auth=v2_auth)
 
-        endpoint = sess.get_endpoint(interface=base.AUTH_INTERFACE,
+        endpoint = sess.get_endpoint(interface=plugin.AUTH_INTERFACE,
                                      version=(3, 0))
 
         self.assertEqual(self.V3_URL, endpoint)
diff --git a/keystoneclient/tests/unit/v3/test_federation.py b/keystoneclient/tests/unit/v3/test_federation.py
index 7b7f19d..3385940 100644
--- a/keystoneclient/tests/unit/v3/test_federation.py
+++ b/keystoneclient/tests/unit/v3/test_federation.py
@@ -11,12 +11,16 @@
 # under the License.
 
 import copy
+from testtools import matchers
 import uuid
 
+from keystoneauth1.tests.unit.identity import test_identity_v3_federation
+
 from keystoneclient import access
 from keystoneclient import exceptions
 from keystoneclient import fixture
 from keystoneclient.tests.unit.v3 import utils
+from keystoneclient.v3 import client
 from keystoneclient.v3.contrib.federation import base
 from keystoneclient.v3.contrib.federation import identity_providers
 from keystoneclient.v3.contrib.federation import mappings
@@ -344,17 +348,10 @@ class FederationProjectTests(utils.TestCase):
         self.manager = self.client.federation.projects
         self.URL = "%s%s" % (self.TEST_URL, '/OS-FEDERATION/projects')
 
-    def new_ref(self, **kwargs):
-        kwargs.setdefault('id', uuid.uuid4().hex)
-        kwargs.setdefault('domain_id', uuid.uuid4().hex)
-        kwargs.setdefault('enabled', True)
-        kwargs.setdefault('name', uuid.uuid4().hex)
-        return kwargs
-
     def test_list_accessible_projects(self):
-        projects_ref = [self.new_ref(), self.new_ref()]
+        projects_ref = [new_ref(), new_ref()]
         projects_json = {
-            self.collection_key: [self.new_ref(), self.new_ref()]
+            self.collection_key: [new_ref(), new_ref()]
         }
         self.requests_mock.get(self.URL, json=projects_json)
         returned_list = self.manager.list()
@@ -364,6 +361,39 @@ class FederationProjectTests(utils.TestCase):
             self.assertIsInstance(project, self.model)
 
 
+def new_ref(**kwargs):
+    kwargs.setdefault('id', uuid.uuid4().hex)
+    kwargs.setdefault('domain_id', uuid.uuid4().hex)
+    kwargs.setdefault('enabled', True)
+    kwargs.setdefault('name', uuid.uuid4().hex)
+    return kwargs
+
+
+class K2KFederatedProjectTests(test_identity_v3_federation.K2KAuthPluginTest):
+    def setUp(self):
+        super(K2KFederatedProjectTests, self).setUp()
+        self.collection_key = 'projects'
+        self.model = projects.Project
+        self.URL = '%s%s' % (self.SP_ROOT_URL, '/OS-FEDERATION/projects')
+
+    def test_list_projects(self):
+        self._mock_k2k_flow_urls()
+        projects_json = {
+            self.collection_key: [new_ref(), new_ref()]
+        }
+        self.requests_mock.get(self.URL, json=projects_json)
+        version_json = {
+            'version': fixture.discovery.V3Discovery(self.SP_ROOT_URL)
+        }
+        self.requests_mock.get(self.SP_ROOT_URL, json=version_json)
+        k2k_client = client.Client(session=self.session, auth=self.k2kplugin)
+        returned_list = k2k_client.federation.projects.list()
+
+        self.assertThat(returned_list, matchers.HasLength(2))
+        for project in returned_list:
+            self.assertIsInstance(project, self.model)
+
+
 class FederationDomainTests(utils.TestCase):
 
     def setUp(self):
diff --git a/keystoneclient/v2_0/tenants.py b/keystoneclient/v2_0/tenants.py
index 79d98d5..e338cfc 100644
--- a/keystoneclient/v2_0/tenants.py
+++ b/keystoneclient/v2_0/tenants.py
@@ -17,7 +17,7 @@
 import six
 from six.moves import urllib
 
-from keystoneclient import auth
+from keystoneauth1 import plugin
 from keystoneclient import base
 from keystoneclient import exceptions
 
@@ -122,7 +122,7 @@ class TenantManager(base.ManagerWithFind):
         try:
             tenant_list = self._list('/tenants%s' % query, 'tenants')
         except exceptions.EndpointNotFound:
-            endpoint_filter = {'interface': auth.AUTH_INTERFACE}
+            endpoint_filter = {'interface': plugin.AUTH_INTERFACE}
             tenant_list = self._list('/tenants%s' % query, 'tenants',
                                      endpoint_filter=endpoint_filter)
 
diff --git a/keystoneclient/v2_0/tokens.py b/keystoneclient/v2_0/tokens.py
index 1874b48..5da1d8d 100644
--- a/keystoneclient/v2_0/tokens.py
+++ b/keystoneclient/v2_0/tokens.py
@@ -10,8 +10,8 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from keystoneauth1 import plugin
 from keystoneclient import access
-from keystoneclient import auth
 from keystoneclient import base
 from keystoneclient import exceptions
 from keystoneclient.i18n import _
@@ -63,7 +63,7 @@ class TokenManager(base.Manager):
         try:
             token_ref = self._create(*args, **kwargs)
         except exceptions.EndpointNotFound:
-            kwargs['endpoint_filter'] = {'interface': auth.AUTH_INTERFACE}
+            kwargs['endpoint_filter'] = {'interface': plugin.AUTH_INTERFACE}
             token_ref = self._create(*args, **kwargs)
 
         return token_ref
diff --git a/keystoneclient/v3/auth.py b/keystoneclient/v3/auth.py
index 8f26d3a..920b3d0 100644
--- a/keystoneclient/v3/auth.py
+++ b/keystoneclient/v3/auth.py
@@ -10,7 +10,7 @@
 # License for the specific language governing permissions and limitations
 # under the License.
 
-from keystoneclient import auth
+from keystoneauth1 import plugin
 from keystoneclient import base
 from keystoneclient import exceptions
 
@@ -60,7 +60,7 @@ class AuthManager(base.Manager):
                               'projects',
                               obj_class=Project)
         except exceptions.EndpointNotFound:
-            endpoint_filter = {'interface': auth.AUTH_INTERFACE}
+            endpoint_filter = {'interface': plugin.AUTH_INTERFACE}
             return self._list(self._PROJECTS_URL,
                               'projects',
                               obj_class=Project,
@@ -74,7 +74,7 @@ class AuthManager(base.Manager):
                               'domains',
                               obj_class=Domain)
         except exceptions.EndpointNotFound:
-            endpoint_filter = {'interface': auth.AUTH_INTERFACE}
+            endpoint_filter = {'interface': plugin.AUTH_INTERFACE}
             return self._list(self._DOMAINS_URL,
                               'domains',
                               obj_class=Domain,
diff --git a/keystoneclient/v3/contrib/federation/base.py b/keystoneclient/v3/contrib/federation/base.py
index 0160170..b2b4514 100644
--- a/keystoneclient/v3/contrib/federation/base.py
+++ b/keystoneclient/v3/contrib/federation/base.py
@@ -11,10 +11,9 @@
 #    under the License.
 
 import abc
-
 import six
 
-from keystoneclient.auth import base as base_auth
+from keystoneauth1 import plugin
 from keystoneclient import base
 from keystoneclient import exceptions
 
@@ -32,8 +31,8 @@ class EntityManager(base.Manager):
         url = '/OS-FEDERATION/%s' % self.object_type
         try:
             tenant_list = self._list(url, self.object_type)
-        except exceptions.EndpointNotFound:
-            endpoint_filter = {'interface': base_auth.AUTH_INTERFACE}
+        except (exceptions.EndpointNotFound, exceptions.EmptyCatalog):
+            endpoint_filter = {'interface': plugin.AUTH_INTERFACE}
             tenant_list = self._list(url, self.object_type,
                                      endpoint_filter=endpoint_filter)
         return tenant_list
diff --git a/keystoneclient/v3/contrib/oauth1/access_tokens.py b/keystoneclient/v3/contrib/oauth1/access_tokens.py
index d45bf3f..3cbbf07 100644
--- a/keystoneclient/v3/contrib/oauth1/access_tokens.py
+++ b/keystoneclient/v3/contrib/oauth1/access_tokens.py
@@ -13,7 +13,7 @@
 
 from __future__ import unicode_literals
 
-from keystoneclient import auth
+from keystoneauth1 import plugin
 from keystoneclient import base
 from keystoneclient.v3.contrib.oauth1 import utils
 
@@ -40,7 +40,7 @@ class AccessTokenManager(base.CrudManager):
                                      resource_owner_secret=request_secret,
                                      signature_method=oauth1.SIGNATURE_HMAC,
                                      verifier=verifier)
-        url = self.client.get_endpoint(interface=auth.AUTH_INTERFACE).rstrip(
+        url = self.client.get_endpoint(interface=plugin.AUTH_INTERFACE).rstrip(
             '/')
         url, headers, body = oauth_client.sign(url + endpoint,
                                                http_method='POST')
diff --git a/keystoneclient/v3/contrib/oauth1/request_tokens.py b/keystoneclient/v3/contrib/oauth1/request_tokens.py
index 27f79c1..bad9757 100644
--- a/keystoneclient/v3/contrib/oauth1/request_tokens.py
+++ b/keystoneclient/v3/contrib/oauth1/request_tokens.py
@@ -15,7 +15,7 @@ from __future__ import unicode_literals
 
 from six.moves.urllib import parse as urlparse
 
-from keystoneclient import auth
+from keystoneauth1 import plugin
 from keystoneclient import base
 from keystoneclient.v3.contrib.oauth1 import utils
 
@@ -63,7 +63,7 @@ class RequestTokenManager(base.CrudManager):
                                      client_secret=consumer_secret,
                                      signature_method=oauth1.SIGNATURE_HMAC,
                                      callback_uri="oob")
-        url = self.client.get_endpoint(interface=auth.AUTH_INTERFACE).rstrip(
+        url = self.client.get_endpoint(interface=plugin.AUTH_INTERFACE).rstrip(
             "/")
         url, headers, body = oauth_client.sign(url + endpoint,
                                                http_method='POST',
-- 
1.9.1

